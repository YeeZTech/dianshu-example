典枢个人版：
前提本次接入微信是基于公众号
使用native支付方式


实现方案：
	1.登录注册：
		后端考虑好登录接口，接口主要内容为用户信息的存储即可，二维码验证等其他操作由前端考虑。
		核心字段：openid，用户头像，昵称，最后登录时间

	2.业务流程：
		主流程为典枢2.0流程，主逻辑不需要调整，但有三个点需要修改
		（1）涉及企业认证的校验需要删除
		（2）删除关于宝付的业务逻辑，重新适配微信支付

	3.支付流程（目前理解为分账逻辑是没法走的，需要走商户转零钱的方案），如此初步设计方案如下：
		（1）前端点击需要生成二维码的下一步之前，后端走保存逻辑，保存完调微信支付接口，生成微信支付二维码
		（2）调用微信native下单api，先下单后返回支付链接
		（3）调用微信H5支付api，付款成功后调用支付通知接口，返回支付明细信息，回写相应字段，处理后续逻辑，此时把钱打入了运营账户（此处的支付通知接口是需要解密签名的，是用的APIv3密钥，需提前设置）
		（4）处理完成后触发分账逻辑，写入分账记录表
		（5）完成后流程结束

	4.退款流程（支付成功后如果业务处理失败需要自动退款回滚给支付账户），应该不存在用户主动发起退款的场景
		（1）业务逻辑处理异常或者审批驳回后触发退款流程
		（2）调用退款接口，完成后退款通知接口会返回相应信息，此处也需要解密
		（3）逻辑处理完成后调整状态

	5.新增查询订单列表等功能

	6.提现功能（运维人员手动维护账户金额变动记录表）


1.需要典枢和支付服务的表结构（已解决）
2.商户号是不是就是运营账户的账号，需要提供
3.需要管理员设置apiv3密钥（已解决）
4.新旧版本代码接口路径一致导致前端不好区分，需要给前端调整下路径


一、1.6版本需求
（1）算法上传需要区分链上和链下
（2）轮询ftp服务文件是否已上传完成，
（3）解析文件生成hash，判断是否正确
（4）读取上传完成的文件上传到cos下，返回路径，并将路径存储到本地
（4）调用fidelius提供（加密私钥，凭证文件，加密文件）的接口，尝试是否可以解密


二、设计方案：
（1）算法表增加交互方式字段（1:链上，2:链下），任务表新增：交互方式字段（1:链上，2:链下），文件hash字段（合约返回），加密私钥字段（合约返回）

（2）链上返回算法hash和交互方式，落盘写入算法表
（3）创建任务时将交互方式落盘
（4）监听合约消息，将文件hash字段落盘
（5）监听合约消息，将加密私钥字段落盘
（6）新建文件路径表（id，任务code，文件路径）
（7）创建定时任务任务
	1）查询所有链下方式传输、任务状态是分析中且任务路径为空的任务
	2）根据任务code查询ftp指定目录下是否存在相应的执行结果文件
	3）如果存在文件，则读取执行结果文件并解析，生成hash验证文件是否正确，
	4）上传到cos，返回上传路径
	5）新增文件路径表数据，将路径落盘存储


（4）线下验证文件是否正确，需要提供内容包括（文件路径，用户凭证，加密私钥）来验证是否可以成功解密，（注：此为测试方案，和主流程无关）

三、疑问：
生成hash的方式目前没什么认知，生成的hash和谁去比较来验证？
有工具可以直接将文件生成hash，和合约返回的文件hash进行比较








